local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "‚òÅÔ∏è Cloud Hub ‚òÅÔ∏è",
   LoadingTitle = "Gadalf-cloud scripts",
   LoadingSubtitle = "by Gadalf",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Cheats üëæ", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

local Toggle = MainTab:CreateToggle({
   Name = "Toggle ESP",
   CurrentValue = true,
   Flag = "toggleesp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineTransparency = 0

local CoreGui = game:FindService("CoreGui")
local Players = game:FindService("Players")
local lp = Players.LocalPlayer
local connections = {}

local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"

local function GetTeamColors(plr)
    if plr.Team == lp.Team then
        return Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 255, 0) -- Verb√ºndete = gr√ºn
    else
        return Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 0, 0) -- Feinde = rot
    end
end

local function CreateHighlightForPlayer(plr)
    local Highlight = Instance.new("Highlight")
    Highlight.Name = plr.Name
    Highlight.DepthMode = DepthMode
    Highlight.FillTransparency = FillTransparency
    Highlight.OutlineTransparency = OutlineTransparency
    Highlight.Parent = Storage
    
    local FillColor, OutlineColor = GetTeamColors(plr)
    Highlight.FillColor = FillColor
    Highlight.OutlineColor = OutlineColor
    
    local plrchar = plr.Character
    if plrchar then
        Highlight.Adornee = plrchar
    end

    connections[plr] = plr.CharacterAdded:Connect(function(char)
        Highlight.Adornee = char
    end)

    -- Erstellen des Namens-Tags, das √ºber dem Kopf schwebt
    local nameTag = Instance.new("BillboardGui")
    nameTag.Size = UDim2.new(0, 200, 0, 50)
    nameTag.Adornee = plr.Character:WaitForChild("Head")
    nameTag.Parent = plr.Character:WaitForChild("Head")
    nameTag.AlwaysOnTop = true
    nameTag.StudsOffset = Vector3.new(0, 2, 0)  -- Verschiebt den Namen 2 Studs √ºber den Kopf des Spielers

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = plr.Name
    nameLabel.TextColor3 = FillColor -- Name hat die gleiche Farbe wie das Highlight
    nameLabel.TextStrokeTransparency = 0.8
    nameLabel.TextSize = 20
    nameLabel.Parent = nameTag

    local function UpdateNameTagVisibility()
        local distance = (plr.Character.Head.Position - lp.Character.Head.Position).magnitude
        if distance < 15 then
            nameTag.Enabled = false
        else
            nameTag.Enabled = true
        end

        -- Verkleinert den Namen je n√§her man kommt
        local newSize = math.clamp(20 - (distance / 10), 10, 20) -- Min. Schriftgr√∂√üe: 10, Max. Schriftgr√∂√üe: 20
        nameLabel.TextSize = newSize
    end

    game:GetService("RunService").Heartbeat:Connect(UpdateNameTagVisibility)

    plr:GetPropertyChangedSignal("Team"):Connect(function()
        local NewFillColor, NewOutlineColor = GetTeamColors(plr)
        Highlight.FillColor = NewFillColor
        Highlight.OutlineColor = NewOutlineColor
        nameLabel.TextColor3 = NewFillColor -- Namefarbe √§ndern, wenn sich das Team √§ndert
    end)
end

-- Erstelle Highlights f√ºr alle aktuellen Spieler
for _, plr in ipairs(Players:GetPlayers()) do
    CreateHighlightForPlayer(plr)
end

-- Erstelle Highlights f√ºr Spieler, die neu beitreten
Players.PlayerAdded:Connect(function(plr)
    CreateHighlightForPlayer(plr)
end)

-- Entferne Highlights, wenn Spieler das Spiel verlassen
Players.PlayerRemoving:Connect(function(plr)
    local plrname = plr.Name
    if Storage[plrname] then
        Storage[plrname]:Destroy()
    end
    if connections[plr] then
        connections[plr]:Disconnect()
    end
end)
   end,
})
